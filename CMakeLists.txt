cmake_minimum_required(VERSION 3.16)
project(testbed)

set(CMAKE_CXX_STANDARD 11)
set(EXECUTABLE_OUTPUT_PATH ${testbed_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ../lib)
find_package(Boost 1.36.0 REQUIRED COMPONENTS thread system serialization)
if(Boost_FOUND)
    include_directories(${BOOST_INCLUDE_DIRS})
    link_directories(${BOOST_LIBRARY_DIR})
endif()
set(OPENSSL_INCLUDE_PATH ../lib/openssl/include)
set(OPENSSL_LIBRARY_PATH ../lib/openssl/)
set(LEVELDB_INCLUDE_PATH ../lib/leveldb/include)
set(LEVELDB_LIBRARY_PATH ../lib/leveldb/build)

include_directories(${BOOST_INCLUDE_DIR} ${LEVELDB_INCLUDE_PATH} ${OPENSSL_INCLUDE_PATH} backward-cpp)
link_directories(${BOOST_LIBRARY_DIR} ${LEVELDB_LIBRARY_PATH} ${OPENSSL_LIBRARY_PATH})
set(BOOST_LIBRARY_OBJ boost_thread boost_system boost_serialization)
set(SYSTEM_LIBRARY_OBJ pthread rt dl isal)
set(OPENSSL_LIBRARY_OBJ ssl crypto)
set(LEVELDB_LIBRARY_OBJ pthread leveldb snappy)
add_subdirectory(backward-cpp)
add_library(database STATIC database.cpp)
add_library(cryptoPrimitive STATIC cryptoPrimitive.cc)
add_library(AESRand STATIC AESRand.cc)
set(LINK_OBJ ${OPENSSL_LIBRARY_OBJ} ${LEVELDB_LIBRARY_OBJ}
        ${BOOST_LIBRARY_OBJ} ${SYSTEM_LIBRARY_OBJ} database cryptoPrimitive AESRand)
set(CMAKE_BUILD_TYPE "Debug")
set(CMAKE_C_FLAGS_DEBUG "-Wall -std=c1x -g -ggdb -g2")
set(CMAKE_CXX_FLAGS_DEBUG "-Wall -std=c++17 -g -ggdb -g2  -maes -mpclmul")
set(CMAKE_MODULE_PATH /usr/share/cmake-3.10/Modules/)
add_executable(testbed main.cpp ${BACKWARD_ENABLE})
target_link_libraries(testbed -Wl,--start-group ${LINK_OBJ} -Wl,--end-group)
target_link_libraries(testbed -lbfd -ldl)
add_backward(testbed)